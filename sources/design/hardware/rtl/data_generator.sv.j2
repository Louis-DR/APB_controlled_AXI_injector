{%- set data_width = 256 -%}
{%- set mask_width = (data_width/8)|int -%}
{%- set lfsr_width = 32 -%}
{%- set lfsr_tabs = "31'b0100011000000000000000000000000" -%}

module data_generator (
  {%- filter align %}
  input  §                        §§ clock,
  input  §                        §§ resetn,
  input  §                        §§ initialize,
  input  §                        §§ enable,
  input  §                        §§ mode_selector,
  input  § {{data_width|arrsize}} §§ initial_value,
  input  §                        §§ shift_enable,
  input  §                        §§ shift_direction,
  input  § {{mask_width|arrsize}} §§ final_byte_mask,
  output § {{data_width|arrsize}} §§ generated_data
  {%- endfilter %}
);

localparam LFSR_TAPS = {{lfsr_tabs}};

logic {{data_width|arrsize}} data;
logic {{data_width|arrsize}} data_next;
logic {{data_width|arrsize}} data_next_lfsr;
logic {{data_width|arrsize}} data_next_shift;
logic {{data_width|arrsize}} data_masked;

{%- filter align %}
{% for lfsr_idx in range(0,data_width,lfsr_width) %}
assign data_next_lfsr[ § {{lfsr_idx+lfsr_width-1}} : §§ {{lfsr_idx}} §§ ] = { data[ § {{lfsr_idx}} §§ ] , ( { {{lfsr_width-1}} {data[ § {{lfsr_idx}} §§ ]} } § & LFSR_TAPS ) ^ data[ § {{lfsr_idx+lfsr_width-1}} : §§ {{lfsr_idx+1}} §§ ] };
{%- endfor %}
{%- endfilter %}

{% filter align -%}
assign data_next_shift = shift_direction ? { data[ § 0 §§] , data[ § {{data_width-1}} : 1 § ] }
                                         : { data[ § {{data_width-2}} : 0 §§ ] , data[ § {{data_width-1}} § ] };
{%- endfilter %}

assign data_next = mode_selector ? data_next_lfsr : data_next_shift;

always_ff @(posedge clock or negedge resetn) begin
  if (!resetn) begin
    data <= 256'd0;
  end else if (initialize) begin
    data <= initial_value;
  end else begin
    data <= data_next;
  end
end

{%- filter align %}
{% for mask_byte in range(0,data_width,8) %}
assign data_masked[ § {{mask_byte+7}} : §§ {{mask_byte}} §§ ] = final_byte_mask[ § {{(mask_byte/8)|int}} §§ ] ? data[ § {{mask_byte+7}} : §§ {{mask_byte}} §§ ] : 8'd0;
{%- endfor %}
{%- endfilter %}

assign generated_data = data_masked;

endmodule
