{% from "macros.j2" import apb_register_bank %}

module axi_injector (
  // ┌─────────────────────────────┐
  // │ Control input APB interface │
  // └─────────────────────────────┘
  input          control_pclk,
  input          control_presetn,
  input          control_psel,
  input          control_penable,
  output         control_pready,
  input    [2:0] control_pprot,
  input   [31:0] control_paddr,
  input          control_pwrite,
  input   [31:0] control_pwdata,
  input    [7:0] control_pstrb,
  output  [31:0] control_prdata,
  output         control_pslverr,
  // ┌───────────────────────────┐
  // │ Data output AXI interface │
  // └───────────────────────────┘
  input          data_aclk,
  input          data_aresetn,
  // Write request channel
  output  [23:0] data_awid,
  output  [31:0] data_awaddr,
  output   [7:0] data_awlen,
  output   [2:0] data_awsize,
  output   [1:0] data_awburst,
  output   [2:0] data_awprot,
  output   [3:0] data_awqos,
  output         data_awvalid,
  input          data_awready,
  // Write data channel
  output [255:0] data_wdata,
  output  [31:0] data_wstrb,
  output         data_wlast,
  output         data_wvalid,
  input          data_wready,
  // Write response channel
  input   [23:0] data_bid,
  input    [1:0] data_bresp,
  input          data_bvalid,
  output         data_bready,
  // Read request channel
  output  [23:0] data_arid,
  output  [31:0] data_araddr,
  output   [7:0] data_arlen,
  output   [2:0] data_arsize,
  output   [1:0] data_arburst,
  output   [2:0] data_arprot,
  output   [3:0] data_arqos,
  output         data_arvalid,
  input          data_arready,
  // Read data response channel
  input   [23:0] data_rid,
  input  [255:0] data_rdata,
  input    [1:0] data_rresp,
  input          data_rlast,
  input          data_rvalid,
  output         data_rready
);

logic unused_ok;
assign unused_ok = |{
  control_pprot,
  control_pstrb,
  data_aclk,
  data_aresetn,
  data_awready,
  data_wready,
  data_bid,
  data_bresp,
  data_bvalid,
  data_arready,
  data_rid,
  data_rdata,
  data_rresp,
  data_rlast,
  data_rvalid,
  1'b0
};

assign data_awid       = '0;
assign data_awaddr     = '0;
assign data_awlen      = '0;
assign data_awsize     = '0;
assign data_awburst    = '0;
assign data_awprot     = '0;
assign data_awqos      = '0;
assign data_awvalid    = '0;
assign data_wdata      = '0;
assign data_wstrb      = '0;
assign data_wlast      = '0;
assign data_wvalid     = '0;
assign data_bready     = '0;
assign data_arid       = '0;
assign data_araddr     = '0;
assign data_arlen      = '0;
assign data_arsize     = '0;
assign data_arburst    = '0;
assign data_arprot     = '0;
assign data_arqos      = '0;
assign data_arvalid    = '0;
assign data_rready     = '0;





/*

  ######                                                ######
  #     # ######  ####  #  ####  ##### ###### #####     #     #   ##   #    # #    #
  #     # #      #    # # #        #   #      #    #    #     #  #  #  ##   # #   #
  ######  #####  #      #  ####    #   #####  #    #    ######  #    # # #  # ####
  #   #   #      #  ### #      #   #   #      #####     #     # ###### #  # # #  #
  #    #  #      #    # # #    #   #   #      #   #     #     # #    # #   ## #   #
  #     # ######  ####  #  ####    #   ###### #    #    ######  #    # #    # #    #

*/

{{apb_register_bank(registers, clock_signal="control_pclk", reset_signal="control_presetn")}}

// Concatenate registers
logic [47:0] start_address__csr;
logic [47:0] stop_address__csr;
logic [47:0] address_increment__csr;
logic [47:0] address_mask__csr;
logic [47:0] number_transactions__csr;
assign start_address__csr        = { start_address_1__csr       , start_address_0__csr       };
assign stop_address__csr         = { stop_address_1__csr        , stop_address_0__csr        };
assign address_increment__csr    = { address_increment_1__csr   , address_increment_0__csr   };
assign address_mask__csr         = { address_mask_1__csr        , address_mask_0__csr        };
assign number_transactions__csr  = { number_transactions_1__csr , number_transactions_0__csr };






/*

   #####                                              #
  #     #  ####  #    # ##### #####   ####  #         #        ####   ####  #  ####
  #       #    # ##   #   #   #    # #    # #         #       #    # #    # # #    #
  #       #    # # #  #   #   #    # #    # #         #       #    # #      # #
  #       #    # #  # #   #   #####  #    # #         #       #    # #  ### # #
  #     # #    # #   ##   #   #   #  #    # #         #       #    # #    # # #    #
   #####   ####  #    #   #   #    #  ####  ######    #######  ####   ####  #  ####

*/

logic do_reset__csr;
logic do_start__csr;
logic do_pause__csr;

assign do_reset__csr = control__csr == 2'h0;
assign do_start__csr = control__csr == 2'h1;
assign do_pause__csr = control__csr == 2'h2;

logic injection_do_reset;
logic injection_do_start;
logic injection_do_pause;

sync do_reset_synchronizer (
  .clock    ( data_aclk          ),
  .resetn   ( data_aresetn       ),
  .data_in  ( do_reset__csr      ),
  .data_out ( injection_do_reset )
);

sync do_start_synchronizer (
  .clock    ( data_aclk          ),
  .resetn   ( data_aresetn       ),
  .data_in  ( do_start__csr      ),
  .data_out ( injection_do_start )
);

sync do_pause_synchronizer (
  .clock    ( data_aclk          ),
  .resetn   ( data_aresetn       ),
  .data_in  ( do_pause__csr      ),
  .data_out ( injection_do_pause )
);

logic injection_is_reset;
logic injection_is_paused;
logic injection_is_active;
logic injection_is_finished;

sync is_reset_synchronizer (
  .clock    ( control_pclk       ),
  .resetn   ( control_presetn    ),
  .data_in  ( injection_do_reset ),
  .data_out ( injection_is_reset )
);

sync is_paused_synchronizer (
  .clock    ( control_pclk        ),
  .resetn   ( control_presetn     ),
  .data_in  ( injection_do_pause  ),
  .data_out ( injection_is_paused )
);

sync is_active_synchronizer (
  .clock    ( control_pclk        ),
  .resetn   ( control_presetn     ),
  .data_in  ( injection_enable    ),
  .data_out ( injection_is_active )
);

sync is_finished_synchronizer (
  .clock    ( control_pclk          ),
  .resetn   ( control_presetn       ),
  .data_in  ( injection_finished    ),
  .data_out ( injection_is_finished )
);

enum {
  RESET    = STATUS__INJECTION__IS_RESET,
  PAUSED   = STATUS__INJECTION__IS_PAUSED,
  ACTIVE   = STATUS__INJECTION__IS_ACTIVE,
  FINISHED = STATUS__INJECTION__IS_FINISHED
} status_fsm_state, status_fsm_state_next;

always_comb begin
  status_fsm_state_next = status_fsm_state;
  case (status_fsm_state)
    RESET    : if      (injection_is_active)   status_fsm_state_next = ACTIVE;
    PAUSED   : if      (injection_is_reset)    status_fsm_state_next = RESET;
               else if (injection_is_active)   status_fsm_state_next = ACTIVE;
    ACTIVE   : if      (injection_is_reset)    status_fsm_state_next = RESET;
               else if (injection_is_paused)   status_fsm_state_next = PAUSED;
               else if (injection_is_finished) status_fsm_state_next = FINISHED;
    FINISHED : if      (injection_is_reset)    status_fsm_state_next = RESET;
  endcase
end

always_ff @(posedge control_pclk or negedge control_presetn) begin
  if (!control_presetn) status_fsm_state <= RESET;
  else                  status_fsm_state <= status_fsm_state_next;
end

assign status__hw_write_enable            = 1'b0;
assign status__injection__hw_write_enable = (status_fsm_state_next != status_fsm_state);
assign status__injection__hw_write_data   = status_fsm_state_next;

logic injection_enable;

logic injection_back_pressure;
logic injection_finished;

always_ff @(posedge data_aclk or negedge data_aresetn) begin
  if (!data_aresetn) begin
    injection_enable <= 1'd0;
  end else begin
    if (injection_do_pause || injection_back_pressure || injection_finished) begin
      injection_enable <= 1'b0;
    end else if (injection_do_start) begin
      injection_enable <= 1'b1;
    end
  end
end






/*

     #                                                  #####
    # #   #####  #####  #####  ######  ####   ####     #     # ###### #    # ###### #####    ##   ##### #  ####  #    #
   #   #  #    # #    # #    # #      #      #         #       #      ##   # #      #    #  #  #    #   # #    # ##   #
  #     # #    # #    # #    # #####   ####   ####     #  #### #####  # #  # #####  #    # #    #   #   # #    # # #  #
  ####### #    # #    # #####  #           #      #    #     # #      #  # # #      #####  ######   #   # #    # #  # #
  #     # #    # #    # #   #  #      #    # #    #    #     # #      #   ## #      #   #  #    #   #   # #    # #   ##
  #     # #####  #####  #    # ######  ####   ####      #####  ###### #    # ###### #    # #    #   #   #  ####  #    #

*/

logic [48:0] injection_address; // Extra bit for overflow
logic [47:0] injection_countdown;

always_ff @(posedge data_aclk or negedge data_aresetn) begin
  if (!data_aresetn) begin
    // Hardware reset
    injection_address   <= 48'd0;
    injection_countdown <= 48'd0;
  end else if (injection_do_reset) begin
    // Software reset
    injection_address   <= start_address__csr;
    injection_countdown <= number_transactions__csr;
  end else begin
    if (injection_enable == 1'b1) begin
      if (injection_mode__csr == 1'b0) begin
        // Inject a number of transactions
        injection_countdown <= injection_countdown - 1;
      end else begin
        // Inject in an address range
        injection_address <= injection_address + address_increment__csr;
      end
    end
  end
end

assign injection_finished = injection_mode__csr ? (injection_address >= stop_address__csr)
                                                : (injection_countdown == 1'b0);

assign injection_back_pressure = 1'b0;

endmodule
