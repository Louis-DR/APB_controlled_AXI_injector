{% from "verilog_macros.j2" import apb_register_bank %}

module axi_injector (
  // ┌─────────────────────────────┐
  // │ Control input APB interface │
  // └─────────────────────────────┘
  input          control_pclock,
  input          control_presetn,
  input          control_psel,
  input          control_penable,
  output         control_pready,
  input    [2:0] control_pprot,
  input   [31:0] control_paddr,
  input          control_pwrite,
  input   [31:0] control_pwdata,
  input    [7:0] control_pstrb,
  output  [31:0] control_prdata,
  output         control_pslverr,
  // ┌───────────────────────────┐
  // │ Data output AXI interface │
  // └───────────────────────────┘
  input          data_aclock,
  input          data_aresetn,
  // Write request channel
  output  [23:0] data_awid,
  output  [47:0] data_awaddr,
  output   [7:0] data_awlen,
  output   [2:0] data_awsize,
  output   [1:0] data_awburst,
  output   [2:0] data_awprot,
  output   [3:0] data_awqos,
  output         data_awvalid,
  input          data_awready,
  // Write data channel
  output [255:0] data_wdata,
  output  [31:0] data_wstrb,
  output         data_wlast,
  output         data_wvalid,
  input          data_wready,
  // Write response channel
  input   [23:0] data_bid,
  input    [1:0] data_bresp,
  input          data_bvalid,
  output         data_bready,
  // Read request channel
  output  [23:0] data_arid,
  output  [47:0] data_araddr,
  output   [7:0] data_arlen,
  output   [2:0] data_arsize,
  output   [1:0] data_arburst,
  output   [2:0] data_arprot,
  output   [3:0] data_arqos,
  output         data_arvalid,
  input          data_arready,
  // Read data response channel
  input   [23:0] data_rid,
  input  [255:0] data_rdata,
  input    [1:0] data_rresp,
  input          data_rlast,
  input          data_rvalid,
  output         data_rready
);

logic unused_ok;
assign unused_ok = |{
  control_pprot,
  control_pstrb,
  data_aclock,
  data_aresetn,
  data_awready,
  data_wready,
  data_bid,
  data_bresp,
  data_bvalid,
  data_arready,
  data_rid,
  data_rdata,
  data_rresp,
  data_rlast,
  data_rvalid,
  1'b0
};






/*

  ######                                                ######
  #     # ######  ####  #  ####  ##### ###### #####     #     #   ##   #    # #    #
  #     # #      #    # # #        #   #      #    #    #     #  #  #  ##   # #   #
  ######  #####  #      #  ####    #   #####  #    #    ######  #    # # #  # ####
  #   #   #      #  ### #      #   #   #      #####     #     # ###### #  # # #  #
  #    #  #      #    # # #    #   #   #      #   #     #     # #    # #   ## #   #
  #     # ######  ####  #  ####    #   ###### #    #    ######  #    # #    # #    #

*/

{{apb_register_bank(registers, clock_signal="control_pclock", reset_signal="control_presetn")}}

// Concatenate registers
logic [47:0] csr__address_range_start;
logic [47:0] csr__address_range_stop;
logic [47:0] csr__address_range_increment;
logic [47:0] csr__address_random_lfsr_seed;
logic [47:0] csr__address_random_lfsr_fibonacci_taps;
logic [46:0] csr__address_random_lfsr_gallois_taps;
logic [47:0] csr__address_random_lfsr_mask;
logic [47:0] csr__address_final_mask;
logic [47:0] csr__number_transactions;
assign csr__address_range_start                = { csr__address_range_start_1                , csr__address_range_start_0                };
assign csr__address_range_stop                 = { csr__address_range_stop_1                 , csr__address_range_stop_0                 };
assign csr__address_range_increment            = { csr__address_range_increment_1            , csr__address_range_increment_0            };
assign csr__address_random_lfsr_seed           = { csr__address_random_lfsr_seed_1           , csr__address_random_lfsr_seed_0           };
assign csr__address_random_lfsr_fibonacci_taps = { csr__address_random_lfsr_fibonacci_taps_1 , csr__address_random_lfsr_fibonacci_taps_0 };
assign csr__address_random_lfsr_gallois_taps   = { csr__address_random_lfsr_gallois_taps_1   , csr__address_random_lfsr_gallois_taps_0   };
assign csr__address_random_lfsr_mask           = { csr__address_random_lfsr_mask_1           , csr__address_random_lfsr_mask_0           };
assign csr__address_final_mask                 = { csr__address_final_mask_1                 , csr__address_final_mask_0                 };
assign csr__number_transactions                = { csr__number_transactions_1                , csr__number_transactions_0                };

logic [255:0] csr__data_initial_value;
assign csr__data_initial_value = { csr__data_initial_value_7 ,
                                   csr__data_initial_value_6 ,
                                   csr__data_initial_value_5 ,
                                   csr__data_initial_value_4 ,
                                   csr__data_initial_value_3 ,
                                   csr__data_initial_value_2 ,
                                   csr__data_initial_value_1 ,
                                   csr__data_initial_value_0 };






/*

   #####                                                ##        #####
  #     #  ####  #    # ##### #####   ####  #          #  #      #     # #####   ##   ##### #    #  ####
  #       #    # ##   #   #   #    # #    # #           ##       #         #    #  #    #   #    # #
  #       #    # # #  #   #   #    # #    # #          ###        #####    #   #    #   #   #    #  ####
  #       #    # #  # #   #   #####  #    # #         #   # #          #   #   ######   #   #    #      #
  #     # #    # #   ##   #   #   #  #    # #         #    #     #     #   #   #    #   #   #    # #    #
   #####   ####  #    #   #   #    #  ####  ######     ###  #     #####    #   #    #   #    ####   ####

*/

// Control requests
logic control__do_reset;
logic control__do_start;
logic control__do_pause;

assign control__do_reset = csr__control == CONTROL__DO_RESET;
assign control__do_start = csr__control == CONTROL__DO_START;
assign control__do_pause = csr__control == CONTROL__DO_PAUSE;

logic generator__do_reset;
logic generator__do_start;
logic generator__do_pause;

sync generator__do_reset__synchronizer (
  .clock    ( data_aclock         ),
  .resetn   ( data_aresetn        ),
  .data_in  ( control__do_reset   ),
  .data_out ( generator__do_reset )
);

sync generator__do_start__synchronizer (
  .clock    ( data_aclock         ),
  .resetn   ( data_aresetn        ),
  .data_in  ( control__do_start   ),
  .data_out ( generator__do_start )
);

sync generator__do_pause__synchronizer (
  .clock    ( data_aclock         ),
  .resetn   ( data_aresetn        ),
  .data_in  ( control__do_pause   ),
  .data_out ( generator__do_pause )
);

// Status feedback
logic generator__is_idle;
logic generator__is_active;
logic generator__is_paused;
logic generator__is_finished;

logic control__is_idle;
logic control__is_active;
logic control__is_paused;
logic control__is_finished;
logic control__is_waiting_outstanding;

sync control__is_idle__synchronizer (
  .clock    ( control_pclock     ),
  .resetn   ( control_presetn    ),
  .data_in  ( generator__is_idle ),
  .data_out ( control__is_idle   )
);

sync control__is_active__synchronizer (
  .clock    ( control_pclock       ),
  .resetn   ( control_presetn      ),
  .data_in  ( generator__is_active ),
  .data_out ( control__is_active   )
);

sync control__is_paused__synchronizer (
  .clock    ( control_pclock       ),
  .resetn   ( control_presetn      ),
  .data_in  ( generator__is_paused ),
  .data_out ( control__is_paused   )
);

sync control__is_finished__synchronizer (
  .clock    ( control_pclock         ),
  .resetn   ( control_presetn        ),
  .data_in  ( generator__is_finished ),
  .data_out ( control__is_finished   )
);

sync control__is_waiting_outstanding__synchronizer (
  .clock    ( control_pclock                  ),
  .resetn   ( control_presetn                 ),
  .data_in  ( collector__is_waiting           ),
  .data_out ( control__is_waiting_outstanding )
);

// Status FSM in control domain
typedef enum {
  IDLE     = STATUS__INJECTION__IS_IDLE,
  ACTIVE   = STATUS__INJECTION__IS_ACTIVE,
  PAUSED   = STATUS__INJECTION__IS_PAUSED,
  FINISHED = STATUS__INJECTION__IS_FINISHED
} status_fsm_state;

status_fsm_state control__status_fsm, control__status_fsm_next;

always_comb begin
  control__status_fsm_next = control__status_fsm;
  case (control__status_fsm)
    IDLE     : if      (control__is_active)   control__status_fsm_next = ACTIVE;
               else if (control__is_paused)   control__status_fsm_next = PAUSED;
               else if (control__is_finished) control__status_fsm_next = FINISHED;
    PAUSED   : if      (control__is_idle)     control__status_fsm_next = IDLE;
               else if (control__is_active)   control__status_fsm_next = ACTIVE;
               else if (control__is_finished) control__status_fsm_next = FINISHED;
    ACTIVE   : if      (control__is_idle)     control__status_fsm_next = IDLE;
               else if (control__is_paused)   control__status_fsm_next = PAUSED;
               else if (control__is_finished) control__status_fsm_next = FINISHED;
    FINISHED : if      (control__is_idle)     control__status_fsm_next = IDLE;
  endcase
end

always_ff @(posedge control_pclock or negedge control_presetn) begin
  if (!control_presetn) control__status_fsm <= IDLE;
  else                  control__status_fsm <= control__status_fsm_next;
end

// Write status to status register
assign csr__status__hw_write_enable            = 1'b0;
assign csr__status__injection__hw_write_enable = (control__status_fsm_next != control__status_fsm);
assign csr__status__injection__hw_write_data   = control__status_fsm_next;
assign csr__status__reception__hw_write_enable = 1'b1;
assign csr__status__reception__hw_write_data   = control__is_waiting_outstanding;





/*

   #####
  #     # ###### #    # ###### #####    ##   #####  ####  #####
  #       #      ##   # #      #    #  #  #    #   #    # #    #
  #  #### #####  # #  # #####  #    # #    #   #   #    # #    #
  #     # #      #  # # #      #####  ######   #   #    # #####
  #     # #      #   ## #      #   #  #    #   #   #    # #   #
   #####  ###### #    # ###### #    # #    #   #    ####  #    #

*/

// Address generator
logic        generator__address_generator_enable;
logic [47:0] generator__generated_address;

address_generator address_generator (
  .clock                ( data_aclock                                  ),
  .resetn               ( data_aresetn                                 ),
  .initialize           ( generator__do_reset                          ),
  .enable               ( generator__address_generator_enable          ),
  .mode_selector        ( csr__injection_mode__address_generation_mode ),
  .range_start          ( csr__address_range_start                     ),
  .range_increment      ( csr__address_range_increment                 ),
  .lfsr_seed            ( csr__address_random_lfsr_seed                ),
  .lfsr_fibonacci_taps  ( csr__address_random_lfsr_fibonacci_taps      ),
  .lfsr_gallois_taps    ( csr__address_random_lfsr_gallois_taps        ),
  .lfsr_mask            ( csr__address_random_lfsr_mask                ),
  .final_mask           ( csr__address_final_mask                      ),
  .generated_address    ( generator__generated_address                 )
);

// Data generator
logic         generator__write_data_generator_enable;
logic [255:0] generator__generated_write_data;

data_generator write_data_generator (
  .clock           ( data_aclock                               ),
  .resetn          ( data_aresetn                              ),
  .initialize      ( generator__do_reset                       ),
  .enable          ( generator__write_data_generator_enable    ),
  .mode_selector   ( csr__injection_mode__data_generation_mode ),
  .initial_value   ( csr__data_initial_value                   ),
  .shift_enable    ( csr__data_shift_mode__enable              ),
  .shift_direction ( csr__data_shift_mode__direction           ),
  .final_byte_mask ( csr__data_final_mask                      ),
  .generated_data  ( generator__generated_write_data           )
);






/*

  ###
   #  #    #      # ######  ####  #####  ####  #####
   #  ##   #      # #      #    #   #   #    # #    #
   #  # #  #      # #####  #        #   #    # #    #
   #  #  # #      # #      #        #   #    # #####
   #  #   ## #    # #      #    #   #   #    # #   #
  ### #    #  ####  ######  ####    #    ####  #    #

*/

// Injection control
logic injector__do_reset;
logic injector__do_start;
logic injector__do_pause;
logic injector__do_finish;
assign injector__do_reset = generator__do_reset;
assign injector__do_start = generator__do_start;
assign injector__do_pause = generator__do_pause;

// Injection FSM state
status_fsm_state injector__status_fsm, injector__status_fsm_next;

// Injection FSM combinational
always_comb begin
  injector__status_fsm_next = injector__status_fsm;
  case (injector__status_fsm)
    IDLE     : if      (injector__do_start)  injector__status_fsm_next = ACTIVE;
    PAUSED   : if      (injector__do_reset)  injector__status_fsm_next = IDLE;
               else if (injector__do_start)  injector__status_fsm_next = ACTIVE;
    ACTIVE   : if      (injector__do_reset)  injector__status_fsm_next = IDLE;
               else if (injector__do_pause)  injector__status_fsm_next = PAUSED;
               else if (injector__do_finish) injector__status_fsm_next = FINISHED;
    FINISHED : if      (injector__do_reset)  injector__status_fsm_next = IDLE;
  endcase
end

// Injection FSM sequential
always_ff @(posedge data_aclock or negedge data_aresetn) begin
  if (!data_aresetn) injector__status_fsm <= IDLE;
  else               injector__status_fsm <= injector__status_fsm_next;
end

// Generation status for control block
assign generator__is_idle     = injector__status_fsm == IDLE;
assign generator__is_active   = injector__status_fsm == ACTIVE;
assign generator__is_paused   = injector__status_fsm == PAUSED;
assign generator__is_finished = injector__status_fsm == FINISHED;

// Injection output signals
logic  [23:0] injector__data_awid;
logic  [31:0] injector__data_awaddr;
logic   [7:0] injector__data_awlen;
logic   [2:0] injector__data_awsize;
logic   [1:0] injector__data_awburst;
logic   [2:0] injector__data_awprot;
logic   [3:0] injector__data_awqos;
logic         injector__data_awvalid;
logic [255:0] injector__data_wdata;
logic  [31:0] injector__data_wstrb;
logic         injector__data_wlast;
logic         injector__data_wvalid;
logic         injector__data_bready;
logic  [23:0] injector__data_arid;
logic  [31:0] injector__data_araddr;
logic   [7:0] injector__data_arlen;
logic   [2:0] injector__data_arsize;
logic   [1:0] injector__data_arburst;
logic   [2:0] injector__data_arprot;
logic   [3:0] injector__data_arqos;
logic         injector__data_arvalid;
logic         injector__data_rready;

// Transaction counter
logic [23:0] injector__injected_transaction_counter;
logic [23:0] injector__injected_transaction_counter_next;

// Write burst counter
logic [8:0] injector__write_burst_counter;
logic [8:0] injector__write_burst_counter_next;

// Transaction assembly and injection combinational logic
always_comb begin
  injector__data_arid    =  24'd0;
  injector__data_araddr  =  48'd0;
  injector__data_arlen   =   8'd0;
  injector__data_arsize  =   3'd0;
  injector__data_arburst =   2'd0;
  injector__data_arprot  =   3'd0;
  injector__data_arqos   =   4'd0;
  injector__data_arvalid =   1'b0;
  injector__data_awid    =  24'd0;
  injector__data_awaddr  =  48'd0;
  injector__data_awlen   =   8'd0;
  injector__data_awsize  =   3'd0;
  injector__data_awburst =   2'd0;
  injector__data_awprot  =   3'd0;
  injector__data_awqos   =   4'd0;
  injector__data_awvalid =   1'b0;
  injector__data_wdata   = 256'd0;
  injector__data_wstrb   =  32'd0;
  injector__data_wlast   =   1'b0;
  injector__data_wvalid  =   1'b0;
  injector__data_rready  =   1'b1;
  injector__data_bready  =   1'b1;
  generator__address_generator_enable         = 1'b0;
  generator__write_data_generator_enable      = 1'b0;
  injector__injected_transaction_counter_next = injector__injected_transaction_counter;
  injector__write_burst_counter_next          = injector__write_burst_counter;
  if (injector__status_fsm == ACTIVE) begin
    if (csr__transaction_attributes__direction == TRANSACTION_ATTRIBUTES__DIRECTION__READ) begin
      // Read request injection
      injector__data_arid    = injector__injected_transaction_counter_next;
      injector__data_araddr  = generator__generated_address;
      injector__data_arlen   = csr__transaction_attributes__length;
      injector__data_arsize  = csr__transaction_attributes__size;
      injector__data_arburst = csr__transaction_attributes__burst;
      injector__data_arprot  = csr__transaction_attributes__protection;
      injector__data_arqos   = csr__transaction_attributes__quality_of_service;
      // Handshake
      injector__data_arvalid = 1'b1;
      if (data_arready == 1'b1) begin
        generator__address_generator_enable = 1'b1;
        injector__injected_transaction_counter_next = injector__injected_transaction_counter + 1;
      end else begin
        generator__address_generator_enable = 1'b0;
      end
    end else begin
      // Write request injection
      if (injector__write_burst_counter == 0) begin
        injector__write_burst_counter_next = {1'b0,csr__transaction_attributes__length} + 1;
        injector__data_awid    = injector__injected_transaction_counter_next;
        injector__data_awaddr  = generator__generated_address;
        injector__data_awlen   = csr__transaction_attributes__length;
        injector__data_awsize  = csr__transaction_attributes__size;
        injector__data_awburst = csr__transaction_attributes__burst;
        injector__data_awprot  = csr__transaction_attributes__protection;
        injector__data_awqos   = csr__transaction_attributes__quality_of_service;
        injector__data_awvalid = 1'b1;
        // Handshake
        injector__data_awvalid = 1'b1;
        if (data_awready == 1'b1) begin
          generator__address_generator_enable = 1'b1;
          injector__injected_transaction_counter_next = injector__injected_transaction_counter + 1;
        end else begin
          generator__address_generator_enable = 1'b0;
        end
      end
      // Write data injection
      if (injector__write_burst_counter_next > 0) begin
        injector__data_wdata = generator__generated_write_data;
        injector__data_wstrb = 32'hFFFFFFFF;
        injector__data_wlast = injector__write_burst_counter_next == 1;
        // Handshake
        injector__data_wvalid = 1'b1;
        if (data_awready == 1'b1) begin
          generator__write_data_generator_enable = 1'b1;
          injector__write_burst_counter_next     = injector__write_burst_counter_next - 1;
        end else begin
          generator__write_data_generator_enable = 1'b0;
        end
      end
    end
  end
end

// Update flops
always_ff @(posedge data_aclock or negedge data_aresetn) begin
  if (!data_aresetn | injector__do_reset) begin
    injector__injected_transaction_counter <= 24'd0;
    injector__write_burst_counter          <=  9'd0;
  end else begin
    injector__injected_transaction_counter <= injector__injected_transaction_counter_next;
    injector__write_burst_counter          <= injector__write_burst_counter_next;
  end
end

// Write request channel
assign data_awid    = injector__data_awid;
assign data_awaddr  = injector__data_awaddr;
assign data_awlen   = injector__data_awlen;
assign data_awsize  = injector__data_awsize;
assign data_awburst = injector__data_awburst;
assign data_awprot  = injector__data_awprot;
assign data_awqos   = injector__data_awqos;
assign data_awvalid = injector__data_awvalid;
// Write data channel
assign data_wdata   = injector__data_wdata;
assign data_wstrb   = injector__data_wstrb;
assign data_wlast   = injector__data_wlast;
assign data_wvalid  = injector__data_wvalid;
// Write response channel
assign data_bready  = injector__data_bready;
// Read request channel
assign data_arid    = injector__data_arid;
assign data_araddr  = injector__data_araddr;
assign data_arlen   = injector__data_arlen;
assign data_arsize  = injector__data_arsize;
assign data_arburst = injector__data_arburst;
assign data_arprot  = injector__data_arprot;
assign data_arqos   = injector__data_arqos;
assign data_arvalid = injector__data_arvalid;
// Read data response channel
assign data_rready  = injector__data_rready;

// Stop condition
always_comb begin
  injector__do_finish = 1'b0;
  case (csr__injection_mode__stop_condition)
    INJECTION_MODE__STOP_CONDITION__ADDRESS_RANGE: begin
      if (generator__generated_address >= csr__address_range_stop) begin
        injector__do_finish = 1'b1;
      end
    end
    INJECTION_MODE__STOP_CONDITION__NUMBER_TRANSACTIONS: begin
      if (injector__injected_transaction_counter_next >= csr__number_transactions) begin
        injector__do_finish = 1'b1;
      end
    end
  endcase
end






/*

   #####
  #     #  ####  #      #      ######  ####  #####  ####  #####
  #       #    # #      #      #      #    #   #   #    # #    #
  #       #    # #      #      #####  #        #   #    # #    #
  #       #    # #      #      #      #        #   #    # #####
  #     # #    # #      #      #      #    #   #   #    # #   #
   #####   ####  ###### ###### ######  ####    #    ####  #    #

*/

// Waiting for the responses to outstanding transactions
logic collector__is_waiting;
logic collector__is_finished;

// Error flag for counter overflow or underflow
logic collector__error_flag;
logic collector__error_flag_next;

// Count the number of outstanding transactions
logic [24:0] collector__outstanding_transaction_counter;
logic [24:0] collector__outstanding_transaction_counter_next;

// Update the counter with the AXI handshake
always_comb begin
  collector__outstanding_transaction_counter_next = collector__outstanding_transaction_counter;
  if (data_awvalid & data_awready) collector__outstanding_transaction_counter_next ++;
  if (data_arvalid & data_arready) collector__outstanding_transaction_counter_next ++;
  if (data_bvalid  & data_bready ) collector__outstanding_transaction_counter_next --;
  if (data_rvalid  & data_rready ) collector__outstanding_transaction_counter_next --;
end

// Overflow or underflow
assign collector__error_flag_next = collector__outstanding_transaction_counter_next[24];

// Update flops
always_ff @(posedge data_aclock or negedge data_aresetn) begin
  if (!data_aresetn) begin
    collector__outstanding_transaction_counter <= 24'd0;
    collector__error_flag                      <= 1'b0;
  end else begin
    collector__outstanding_transaction_counter <= collector__outstanding_transaction_counter_next;
    collector__error_flag                      <= collector__error_flag_next;
  end
end

// Collection status for control block
assign collector__is_waiting  = collector__outstanding_transaction_counter != 24'd0;
assign collector__is_finished = ~collector__is_waiting;



endmodule
