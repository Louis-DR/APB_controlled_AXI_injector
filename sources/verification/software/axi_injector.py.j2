from enum import IntEnum

import cocotb
from cocotb.clock import Clock
from cocotb.handle import SimHandleBase
from cocotb.triggers import ClockCycles

import cocotbext.apb as apb
import cocotbext.axi as axi

from verification.software.cocotb_utils import APBRegister, APBRegisterField
from verification.software.utils import break_to_words, padd_array

{%- filter align %}
{% for register in registers %}
csr__{{register.name}}__address § = 0x{{register.offset|hexadecimal}}
{%- endfor %}
{%- endfilter %}

class InjectionAddressGenerationMode(IntEnum):
  RANGE  = 0x0
  RANDOM = 0x1

class InjectionDataGenerationMode(IntEnum):
  SHIFT  = 0x0
  RANDOM = 0x1

class InjectionStopCondition(IntEnum):
  ADDRESS_RANGE       = 0x0
  NUMBER_TRANSACTIONS = 0x1

class InjectionDataShiftEnable(IntEnum):
  DISABLE = 0x0
  ENABLE  = 0x1

class InjectionDataShiftDirection(IntEnum):
  LEFT  = 0x0
  RIFTH = 0x1

class InjectionTransactionDirection(IntEnum):
  READ  = 0x0
  WRITE = 0x1

class InjectionTransactionSize(IntEnum):
  _1B   = 0x0
  _2B   = 0x1
  _4B   = 0x2
  _8B   = 0x3
  _16B  = 0x4
  _32B  = 0x5
  _64B  = 0x6
  _128B = 0x7

class InjectionTransactionBurst(IntEnum):
  FIXED = 0x0
  INCR  = 0x1
  WRAP  = 0x2

class InjectionTransactionProtectionPriviledge(IntEnum):
  UNPRIVILEDGED = 0x0
  PRIVILEDGED   = 0x1
  DEFAULT       = UNPRIVILEDGED

class InjectionTransactionProtectionSecurity(IntEnum):
  SECURE     = 0x0
  NON_SECURE = 0x1
  DEFAULT    = NON_SECURE

class InjectionTransactionProtectionAccessType(IntEnum):
  DATA        = 0x0
  INSTRUCTION = 0x1
  DEFAULT     = DATA

class AXIInjector_TestBench:
  class AXIInjector_Registers:
    def __init__(self, apb_master:apb.APBMasterDriver):
      self.apb_master = apb_master

      {%- filter align %}
      {% for register in registers %}
      self.{{register.name}} § = APBRegister(self.apb_master, 0x{{register.offset|hexadecimal}})
      {%- if register.fields is defined %} {% for field in register.fields %}
      self.{{register.name}} § .add_field("{{field.name}}", § APBRegisterField(offset={{field.offset}}, § width={{field.width}}))
      {%- endfor -%} {% endif -%}
      {%- endfor %}
      {%- endfilter %}

  def __init__(self, dut:SimHandleBase):
    self.dut = dut

    self.registers = None

    self.apb_master = None
    self.axi_ram    = None

    self.control_clock_period = 10
    self.data_clock_period    = 1

    self.axi_ram_size = 2**48

  def instanciate_peripherals(self) -> None:
    self.apb_master = apb.APBMasterDriver(self.dut, "control", self.dut.control_pclock, uppercase=False)
    self.axi_ram    = axi.AxiRam(bus                = axi.AxiBus.from_prefix(self.dut, "data"),
                                 clock              = self.dut.data_aclock,
                                 reset              = self.dut.data_aresetn,
                                 size               = self.axi_ram_size,
                                 reset_active_level = False)

  def start_clocks(self) -> None:
    cocotb.start_soon(Clock(self.dut.control_pclock, self.control_clock_period, units="ns").start())
    cocotb.start_soon(Clock(self.dut.data_aclock,    self.data_clock_period,    units="ns").start())

  async def reset_device(self) -> None:
    self.dut.control_presetn.value = 0
    self.dut.data_aresetn.value = 0
    await ClockCycles(self.dut.control_pclock, 5)
    self.dut.control_presetn.value = 1
    self.dut.data_aresetn.value = 1
    await ClockCycles(self.dut.control_pclock, 5)

  def create_registers(self) -> None:
    self.registers = self.AXIInjector_Registers(self.apb_master)

  async def initialize_testbench(self) -> None:
    self.instanciate_peripherals()
    self.start_clocks()
    await self.reset_device()
    self.create_registers()

  async def configure_injection(self,
                                address_generation_mode            : InjectionAddressGenerationMode           = None,
                                address_range_start                : int                                      = None,
                                address_range_stop                 : int                                      = None,
                                address_range_increment            : int                                      = None,
                                address_random_lfsr_seed           : int                                      = None,
                                address_random_lfsr_fibonacci_taps : int                                      = None,
                                address_random_lfsr_gallois_taps   : int                                      = None,
                                address_random_lfsr_mask           : int                                      = None,
                                address_final_mask                 : int                                      = None,
                                data_generation_mode               : InjectionDataGenerationMode              = None,
                                data_initial_value                 : int                                      = None,
                                data_shift_enable                  : InjectionDataShiftEnable                 = None,
                                data_shift_direction               : InjectionDataShiftDirection              = None,
                                data_final_mask                    : int                                      = None,
                                stop_condition                     : InjectionStopCondition                   = None,
                                number_transactions                : int                                      = None,
                                transaction_direction              : InjectionTransactionDirection            = None,
                                transaction_length                 : int                                      = None,
                                transaction_size                   : InjectionTransactionSize                 = None,
                                transaction_burst                  : InjectionTransactionBurst                = None,
                                transaction_protection_priviledge  : InjectionTransactionProtectionPriviledge = None,
                                transaction_protection_security    : InjectionTransactionProtectionSecurity   = None,
                                transaction_protection_access_type : InjectionTransactionProtectionAccessType = None,
                                transaction_quality_of_service     : int                                      = None,
                                ) -> None:
    self.registers.injection_mode.modify_field("address_generation_mode", address_generation_mode)
    self.registers.injection_mode.modify_field("data_generation_mode", data_generation_mode)
    self.registers.injection_mode.modify_field("stop_condition", stop_condition)
    await self.registers.injection_mode.update()

    self.registers.data_shift_mode.modify_field("enable", data_shift_enable)
    self.registers.data_shift_mode.modify_field("direction", data_shift_direction)
    await self.registers.data_shift_mode.update()

    await self.registers.data_final_mask.write(data_final_mask)

    {% for register_48b in (
      "address_range_start",
      "address_range_stop",
      "address_range_increment",
      "address_random_lfsr_seed",
      "address_random_lfsr_fibonacci_taps",
      "address_random_lfsr_gallois_taps",
      "address_random_lfsr_mask",
      "address_final_mask",
      "number_transactions"
    ) %}
    if {{register_48b}} != None:
      {{register_48b}}_values = padd_array(break_to_words({{register_48b}}, word_size=32), padding_length=2, padding_value=0)
      await self.registers.{{register_48b}}_0.write({{register_48b}}_values[0])
      await self.registers.{{register_48b}}_1.write({{register_48b}}_values[1])
    {% endfor %}

    if data_initial_value != None:
      data_initial_value_values = padd_array(break_to_words(data_initial_value, word_size=32), padding_length=8, padding_value=0)
      await self.registers.data_initial_value_0.write(data_initial_value_values[0])
      await self.registers.data_initial_value_1.write(data_initial_value_values[1])
      await self.registers.data_initial_value_2.write(data_initial_value_values[2])
      await self.registers.data_initial_value_3.write(data_initial_value_values[3])
      await self.registers.data_initial_value_4.write(data_initial_value_values[4])
      await self.registers.data_initial_value_5.write(data_initial_value_values[5])
      await self.registers.data_initial_value_6.write(data_initial_value_values[6])
      await self.registers.data_initial_value_7.write(data_initial_value_values[7])

    self.registers.transaction_attributes.modify_field("direction",          transaction_direction)
    self.registers.transaction_attributes.modify_field("length",             transaction_length)
    self.registers.transaction_attributes.modify_field("size",               transaction_size)
    self.registers.transaction_attributes.modify_field("burst",              transaction_burst)
    self.registers.transaction_attributes.modify_field("quality_of_service", transaction_quality_of_service)
    if transaction_protection_priviledge != None or transaction_protection_security != None or transaction_protection_access_type != None:
      transaction_protection_priviledge  = transaction_protection_priviledge  if transaction_protection_priviledge  != None else InjectionTransactionProtectionPriviledge.DEFAULT
      transaction_protection_security    = transaction_protection_security    if transaction_protection_security    != None else InjectionTransactionProtectionSecurity.DEFAULT
      transaction_protection_access_type = transaction_protection_access_type if transaction_protection_access_type != None else InjectionTransactionProtectionAccessType.DEFAULT
      self.registers.transaction_attributes.modify_field("protection",       transaction_protection_priviledge
                                                                           & transaction_protection_security << 1
                                                                           & transaction_protection_access_type << 2)
    await self.registers.transaction_attributes.update()
