
{% macro apb_register_bank(registers,
                           base_address    = 0,
                           clock_signal    = "clock",
                           reset_signal    = "resetn",
                           apb_prefix      = "control",
                           apb_separator   = "_",
                           apb_lowercase   = True,
                           register_prefix = "",
                           register_suffix = "__csr",
                           field_separator = "__",
                           field_prefix    = "",
                           field_suffix    = "__csr",
                           hw_write_prefix = "",
                           hw_write_suffix = "__hw_write") -%}

{% filter align %}
// APB output signals
logic § [31:0] §§ {{apb_prefix}}{{apb_separator}}prdata__out;
logic §        §§ {{apb_prefix}}{{apb_separator}}pready__out;
logic §        §§ {{apb_prefix}}{{apb_separator}}pslverr__out;

// Registers
{% for register in registers -%}
logic § [{{register.width-1}}:0] §§ {{register_prefix}}{{register.name}}{{register_suffix}};
{% endfor -%}

// Hardware write signals
{% for register in registers -%} {%- if register.hw_access in ("read-write", "write-only") %}
logic §                          §§ {{hw_write_prefix}}{{register.name}}{{hw_write_suffix}}_enable;
logic § [{{register.width-1}}:0] §§ {{hw_write_prefix}}{{register.name}}{{hw_write_suffix}}_data;
{% endif -%} {% endfor -%}
{%- endfilter %}
// Register reset and write
always_ff @(posedge {{clock_signal}} or negedge {{reset_signal}}) begin
  if (!{{reset_signal}}) begin
    // Reset
    {%- filter align -%} {%- for register in registers %}
    {{register_prefix}}{{register.name}}{{register_suffix}} § <= § {{register.width}}'h{{register.reset|hexadecimal}};§§
    {%- endfor %} {%- endfilter %}
  end else if (   {{apb_prefix}}{{apb_separator}}psel
               && {{apb_prefix}}{{apb_separator}}penable
               && {{apb_prefix}}{{apb_separator}}pwrite) begin
    // Software write
    case ({{apb_prefix}}{{apb_separator}}paddr)
      {%- filter align -%} {%- for register in registers %} {%- if register.sw_access in ("read-write", "write-only") %}
      32'h{{(base_address + register.offset) | hexadecimal}} § : {{register_prefix}}{{register.name}}{{register_suffix}} § <= {{apb_prefix}}{{apb_separator}}pwdata § [{{register.width-1}}:0];§§
      {%- endif %} {%- endfor %} {%- endfilter %}
    endcase
  end else begin
    // Hardware write
    case ({{apb_prefix}}{{apb_separator}}paddr)
      {%- filter align -%} {%- for register in registers %} {%- if register.hw_access in ("read-write", "write-only") %}
      32'h{{(base_address + register.offset) | hexadecimal}} § : if ({{hw_write_prefix}}{{register.name}}{{hw_write_suffix}}_enable) § {{register_prefix}}{{register.name}}{{register_suffix}} § <= {{hw_write_prefix}}{{register.name}}{{hw_write_suffix}}_data;
      {%- endif %} {%- endfor %} {%- endfilter %}
    endcase
  end
end

// Register read
always_comb begin
  if (    {{apb_prefix}}{{apb_separator}}psel
      &&  {{apb_prefix}}{{apb_separator}}penable) begin
    {{apb_prefix}}{{apb_separator}}pready__out  = 1'b1;
    {{apb_prefix}}{{apb_separator}}pslverr__out = 1'b0;
    if (~{{apb_prefix}}{{apb_separator}}pwrite) begin
      {{apb_prefix}}{{apb_separator}}prdata__out  = 32'd0;
      case ({{apb_prefix}}{{apb_separator}}paddr)
        {%- filter align -%} {%- for register in registers %} {%- if register.sw_access in ("read-write", "read-only") %}
        32'h{{(base_address + register.offset) | hexadecimal}} § : {{apb_prefix}}{{apb_separator}}prdata__out § [{{register.width-1}}:0] §§ = {{register_prefix}}{{register.name}}{{register_suffix}};
        {%- endif %} {%- endfor %} {%- endfilter %}
        default: begin
          {{apb_prefix}}{{apb_separator}}prdata__out  = 32'd0;
          {{apb_prefix}}{{apb_separator}}pslverr__out =  1'b1;
        end
      endcase
    end
  end else begin
    {{apb_prefix}}{{apb_separator}}pready__out  =  1'b0;
    {{apb_prefix}}{{apb_separator}}pslverr__out =  1'b0;
    {{apb_prefix}}{{apb_separator}}prdata__out  = 32'd0;
  end
end

// APB output signals
assign {{apb_prefix}}{{apb_separator}}prdata  = {{apb_prefix}}{{apb_separator}}prdata__out;
assign {{apb_prefix}}{{apb_separator}}pready  = {{apb_prefix}}{{apb_separator}}pready__out;
assign {{apb_prefix}}{{apb_separator}}pslverr = {{apb_prefix}}{{apb_separator}}pslverr__out;

// Register fields
{%- for register in registers %} {%- if register.fields is defined %}
{%- filter align -%} {%- for field in register.fields %}
logic § [{{field.width-1}}:0] §§ {{field_prefix}}{{register.name}}{{field_separator}}{{field.name}}{{field_suffix}};
{%- endfor %} {%- endfilter %}
assign { {% for field in register.fields -%} {{field_prefix}}{{register.name}}{{field_separator}}{{field.name}}{{field_suffix}} {{ ",\n        " if not loop.last else "" }} {% endfor -%} } = {{register_prefix}}{{register.name}}{{register_suffix}};
{% endif %} {%- endfor %}

{%- endmacro %}
