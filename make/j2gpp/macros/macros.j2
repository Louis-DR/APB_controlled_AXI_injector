
{% macro apb_register_bank(registers,
                           base_address  = 0,
                           clock_signal  = "clock",
                           reset_signal  = "resetn",
                           apb_prefix    = "control",
                           apb_separator = "_",
                           apb_lowercase = True) -%}

{% filter align %}
// APB output signals
logic § [31:0] §§ {{apb_prefix}}{{apb_separator}}prdata_out;
logic §        §§ {{apb_prefix}}{{apb_separator}}pready_out;
logic §        §§ {{apb_prefix}}{{apb_separator}}pslverr_out;

// Registers
{% for register in registers -%}
logic § [{{register.width-1}}:0] §§ {{register.name}};
{% endfor -%}
{%- endfilter %}
// Register reset and write
always_ff @(posedge {{clock_signal}} or negedge {{reset_signal}}) begin
  if (!{{reset_signal}}) begin
    {%- filter align -%}
    {%- for register in registers %}
    {{register.name}} § <= § {{register.width}}'h{{register.reset|hexadecimal}};§§
    {%- endfor %}
    {%- endfilter %}
  end else if (   {{apb_prefix}}{{apb_separator}}psel
               && {{apb_prefix}}{{apb_separator}}penable
               && {{apb_prefix}}{{apb_separator}}pwrite) begin
    case ({{apb_prefix}}{{apb_separator}}paddr)
      {%- filter align -%}
      {%- for register in registers %}
      32'h{{(base_address + register.offset) | hexadecimal}} § : {{register.name}} § <= {{apb_prefix}}{{apb_separator}}pwdata § [{{register.width-1}}:0];§§
      {%- endfor %}
      {%- endfilter %}
    endcase
  end
end

// Register read
always_comb begin
  if (    {{apb_prefix}}{{apb_separator}}psel
      &&  {{apb_prefix}}{{apb_separator}}penable) begin
    {{apb_prefix}}{{apb_separator}}pready_out  = 1'b1;
    {{apb_prefix}}{{apb_separator}}pslverr_out = 1'b0;
    if (~{{apb_prefix}}{{apb_separator}}pwrite) begin
      {{apb_prefix}}{{apb_separator}}prdata_out  = 32'd0;
      case ({{apb_prefix}}{{apb_separator}}paddr)
        {%- filter align -%}
        {%- for register in registers %}
        32'h{{(base_address + register.offset) | hexadecimal}} § : {{apb_prefix}}{{apb_separator}}prdata_out § [{{register.width-1}}:0] §§ = {{register.name}};
        {%- endfor %}
        {%- endfilter %}
        default: begin
          {{apb_prefix}}{{apb_separator}}prdata_out  = 32'd0;
          {{apb_prefix}}{{apb_separator}}pslverr_out =  1'b1;
        end
      endcase
    end
  end else begin
    {{apb_prefix}}{{apb_separator}}pready_out  =  1'b0;
    {{apb_prefix}}{{apb_separator}}pslverr_out =  1'b0;
    {{apb_prefix}}{{apb_separator}}prdata_out  = 32'd0;
  end
end

// APB output signals
assign {{apb_prefix}}{{apb_separator}}prdata  = {{apb_prefix}}{{apb_separator}}prdata_out;
assign {{apb_prefix}}{{apb_separator}}pready  = {{apb_prefix}}{{apb_separator}}pready_out;
assign {{apb_prefix}}{{apb_separator}}pslverr = {{apb_prefix}}{{apb_separator}}pslverr_out;

{%- endmacro %}

{% macro apb_register_bank_test(registers) -%}
{% for register in registers %}
{{register.name}} : {{register.offset}}
{% endfor %}
{%- endmacro %}
